{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 What \u00b6 Samaritan (s\u0259\u02c8mer\u0259tn) is a client side proxy that works on L4 or L7 layer written by golang, provide high availability and load balancing. You can call it Sam (sam) for simplicity. Why \u00b6 At the beginning of our adapting to SOA , we used HAProxy as a client-side load balancer. It does the job, painfully, as we have to do a file-based re-configuration whenever a change happens to the back-end nodes. The maintenance of the configuration file really hurts our OPs a lot, not to mention that a reload to HAProxy causes downtime. This issue is so popular that people created things like Synapse and Bamboo to manage HAProxy instances, even hack deeply to minimize the downtime caused by HAProxy reload . Those are great projects and actually get things done, however our approach to this is different, we want something more solid than templated configuration file with managed HAProxy processes. Boldly we decide to write our own load balancer with SOA in mind to replace HAProxy, and that is Samaritan . We name this project Samaritan for saving our OPs from extreme misery: A charitable or helpful person (with reference to Luke 10:33). \"suddenly, miraculously, a Good Samaritan leaned over and handed the cashier a dollar bill on my behalf\" Design goals \u00b6 Simple, modular, testable High performance with as little resources as possible Support hot upgrade, and the impact is as small as possible Keep the external interface is lightweight and backward compatible Be as transparent as possible and reduce business transformation Features \u00b6 Sidecar Sam is a separated process which runs alongside the application. All the requests to basic components such as MySQL , Redis and MQ from application will be proxied by the local instance. It shields the cluster discovery, switching, shrinking and other details in the distributed environment of the basic components, so that the application can use as smooth as a single machine. Written by golang Go is an open source programming language that makes it easy to build simple, reliable, and efficient software. It has good performance and is widely used in the cloud environment. Hot re-configuration without downtime Sam supports obtaining the proxy configuration and service endpoints from the remote and updating at runtime which means doesn't need to restart at all. It greatly reduces the cost of operation and maintenance, makes the large-scale deployment possible. First-class Redis cluster support Redis Cluster provides a way to run a Redis installation where data is automatically sharded across multiple Redis nodes. Sam supports L7 transparent proxy for redis requests, will forward the request to the correct node automatically. In addition, also supports transparent compression for big key and real-time hot key collection. Good observability Provide detailed metrics about connection and request which could help us understand the state of network and services, make decisions. These exported statistics could be viewable via prometheus or the local admin api. How it works \u00b6 Sam pulls proxy strategy and service endpoints from the management server and do the load balancing at client side. Sash is a management server. It delivers the change of proxy strategy and service endpoints to the related sam instances. Also, provides the ops tools, such as deploy, upgrade, etc. Sash is a combination of Sam and Dashboard. Next step \u00b6 I believe that by reading the above chapters, you should have a basic impression and concept of Sam, then you can try to play with it .","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#what","text":"Samaritan (s\u0259\u02c8mer\u0259tn) is a client side proxy that works on L4 or L7 layer written by golang, provide high availability and load balancing. You can call it Sam (sam) for simplicity.","title":"What"},{"location":"#why","text":"At the beginning of our adapting to SOA , we used HAProxy as a client-side load balancer. It does the job, painfully, as we have to do a file-based re-configuration whenever a change happens to the back-end nodes. The maintenance of the configuration file really hurts our OPs a lot, not to mention that a reload to HAProxy causes downtime. This issue is so popular that people created things like Synapse and Bamboo to manage HAProxy instances, even hack deeply to minimize the downtime caused by HAProxy reload . Those are great projects and actually get things done, however our approach to this is different, we want something more solid than templated configuration file with managed HAProxy processes. Boldly we decide to write our own load balancer with SOA in mind to replace HAProxy, and that is Samaritan . We name this project Samaritan for saving our OPs from extreme misery: A charitable or helpful person (with reference to Luke 10:33). \"suddenly, miraculously, a Good Samaritan leaned over and handed the cashier a dollar bill on my behalf\"","title":"Why"},{"location":"#design-goals","text":"Simple, modular, testable High performance with as little resources as possible Support hot upgrade, and the impact is as small as possible Keep the external interface is lightweight and backward compatible Be as transparent as possible and reduce business transformation","title":"Design goals"},{"location":"#features","text":"Sidecar Sam is a separated process which runs alongside the application. All the requests to basic components such as MySQL , Redis and MQ from application will be proxied by the local instance. It shields the cluster discovery, switching, shrinking and other details in the distributed environment of the basic components, so that the application can use as smooth as a single machine. Written by golang Go is an open source programming language that makes it easy to build simple, reliable, and efficient software. It has good performance and is widely used in the cloud environment. Hot re-configuration without downtime Sam supports obtaining the proxy configuration and service endpoints from the remote and updating at runtime which means doesn't need to restart at all. It greatly reduces the cost of operation and maintenance, makes the large-scale deployment possible. First-class Redis cluster support Redis Cluster provides a way to run a Redis installation where data is automatically sharded across multiple Redis nodes. Sam supports L7 transparent proxy for redis requests, will forward the request to the correct node automatically. In addition, also supports transparent compression for big key and real-time hot key collection. Good observability Provide detailed metrics about connection and request which could help us understand the state of network and services, make decisions. These exported statistics could be viewable via prometheus or the local admin api.","title":"Features"},{"location":"#how-it-works","text":"Sam pulls proxy strategy and service endpoints from the management server and do the load balancing at client side. Sash is a management server. It delivers the change of proxy strategy and service endpoints to the related sam instances. Also, provides the ops tools, such as deploy, upgrade, etc. Sash is a combination of Sam and Dashboard.","title":"How it works"},{"location":"#next-step","text":"I believe that by reading the above chapters, you should have a basic impression and concept of Sam, then you can try to play with it .","title":"Next step"},{"location":"changelog/","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . Unreleased \u00b6","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#unreleased","text":"","title":"Unreleased"},{"location":"faq/","text":"FAQ \u00b6","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"proto-ref/","text":"Protocol Documentation \u00b6 Table of Contents \u00b6 discovery.proto SvcConfigDiscoveryRequest SvcConfigDiscoveryResponse SvcConfigDiscoveryResponse.UpdatedEntry SvcDiscoveryRequest SvcDiscoveryResponse SvcEndpointDiscoveryRequest SvcEndpointDiscoveryResponse DiscoveryService bootstrap/bootstrap.proto Admin Bootstrap ConfigSource Log Log.Output Sink StaticService Stats Log.Level Log.Output.Type Sink.Type hc/hc.proto ATCPChecker ATCPChecker.Action HealthCheck MySQLChecker RedisChecker TCPChecker protocol/protocol.proto MySQLOption RedisOption TCPOption Protocol RedisOption.ReadStrategy common/instance.proto Instance common/address.proto Address service/endpoint.proto Endpoint Endpoint.State Endpoint.Type service/service.proto Service service/config.proto Config Listener LoadBalancePolicy Scalar Value Types Top discovery.proto \u00b6 SvcConfigDiscoveryRequest \u00b6 Field Type Label Description svc_names_subscribe string repeated All service names that need to subscribe. svc_names_unsubscribe string repeated All service names that need to unsubscribe. SvcConfigDiscoveryResponse \u00b6 Field Type Label Description updated SvcConfigDiscoveryResponse.UpdatedEntry repeated Update of configuration. SvcConfigDiscoveryResponse.UpdatedEntry \u00b6 Field Type Label Description key string value service.Config SvcDiscoveryRequest \u00b6 Field Type Label Description instance common.Instance Meta information of the current instance. SvcDiscoveryResponse \u00b6 Field Type Label Description added service.Service repeated Added service. removed service.Service repeated Removed service. SvcEndpointDiscoveryRequest \u00b6 Field Type Label Description svc_names_subscribe string repeated All service names that need to subscribe. svc_names_unsubscribe string repeated All service names that need to unsubscribe. SvcEndpointDiscoveryResponse \u00b6 Field Type Label Description svc_name string Name of service which endpoints had updated. added service.Endpoint repeated Added endpoints. removed service.Endpoint repeated Removed endpoints. DiscoveryService \u00b6 DiscoveryService is a service which is used to discover service, service config and service endpoints. Method Name Request Type Response Type Description StreamSvcs SvcDiscoveryRequest SvcDiscoveryResponse stream StreamSvcConfigs SvcConfigDiscoveryRequest stream SvcConfigDiscoveryResponse stream StreamSvcEndpoints SvcEndpointDiscoveryRequest stream SvcEndpointDiscoveryResponse stream Top bootstrap/bootstrap.proto \u00b6 Admin \u00b6 The admin message is required to configure the administration server. Field Type Label Description bind common.Address The TCP address that the administration server will listen on, not null. Bootstrap \u00b6 This message is supplied via '-config' cli flag and act as the root of configuration. Field Type Label Description instance common.Instance The instance contains the meta information of the current instance. log Log Configuration for log. stats Stats Configuration for stats. admin Admin Configuration for the local administration HTTP server. static_services StaticService repeated Statically specified services. dynamic_source_config ConfigSource Configuration for dynamic source config. ConfigSource \u00b6 Configuration for dynamic source config. Field Type Label Description endpoint string The gRPC endpoint of dynamic source config service, not null. Log \u00b6 Log config. Field Type Label Description level Log.Level Logging level output Log.Output Output target configuration, support send log to stdout or syslog, use stdout as default. Log.Output \u00b6 Field Type Label Description type Log.Output.Type Type of output target. target string Address of server which is required when SYSLOG is selected. Sink \u00b6 Sink is a sink for stats. Each Sink is responsible for writing stats to a backing store. Field Type Label Description type Sink.Type endpoint string Sink endpoint, not empty. StaticService \u00b6 The wrapper of service config and endpoints. Field Type Label Description name string The name of service. config service.Config The proxy strategy of service. endpoints service.Endpoint repeated The endpoints of service. Need at least one endpoint. Stats \u00b6 Stats config. Field Type Label Description sinks Sink repeated Optional set of stats sinks. Log.Level \u00b6 Name Number Description INFO 0 Print base messages during running. This is in addition to warnings and errors. DEBUG -1 Print everything, including debugging information. WARING 1 Print all warnings and errors. ERROR 2 Print all errors. QUIET 3 Print nothing. Log.Output.Type \u00b6 Name Number Description STDOUT 0 stdout SYSLOG 1 syslog Sink.Type \u00b6 Sink type Name Number Description UNKNOWN 0 STATSD 1 statsd Top hc/hc.proto \u00b6 ATCPChecker \u00b6 ATCP checker config. Field Type Label Description action ATCPChecker.Action repeated List of actions. All actions will execute during the health check, if one of the actions fails, this health check will be considered as failed. Need at least one action. ATCPChecker.Action \u00b6 Action represents a set of requests from Samaritan to the server and what the expected server returns. Field Type Label Description send bytes This is used to send a data along with a connection opening. expect bytes Expecting content returned from the server. HealthCheck \u00b6 Configuration of health check. Field Type Label Description interval google.protobuf.Duration The interval between two consecutive health checks. Must be greater than 0s. timeout google.protobuf.Duration The timeout when doing a health check. Must be greater than 0s. fall_threshold uint32 A server will be considered as dead after # consecutive unsuccessful health checks. Must be greater than 0. rise_threshold uint32 A server will be considered as operational after # consecutive successful health checks. Must be greater than 0. tcp_checker TCPChecker atcp_checker ATCPChecker mysql_checker MySQLChecker redis_checker RedisChecker MySQLChecker \u00b6 MySQL checker config. Field Type Label Description username string MySQL server username, not null. RedisChecker \u00b6 Redis checker config. Field Type Label Description password string Redis server password, if the password is not empty, the AUTH command will be sent before the PING command. TCPChecker \u00b6 TCP checker config. Top protocol/protocol.proto \u00b6 MySQLOption \u00b6 MySQL protocol option. RedisOption \u00b6 Redis protocol option. Field Type Label Description read_strategy RedisOption.ReadStrategy Strategy of a read only command. TCPOption \u00b6 TCP protocol option. Protocol \u00b6 Protocol enum. Name Number Description UNKNOWN 0 TCP 1 TCP MySQL 2 MySQL Redis 3 Redis RedisOption.ReadStrategy \u00b6 Name Number Description MASTER 0 Read from master nodes. SLAVE 1 Read from slave nodes. BOTH 2 Read from all nodes. Top common/instance.proto \u00b6 Instance \u00b6 Field Type Label Description id string The id of this instance, if id is not define, it will generate by ip and admin port. version string Version of this instance running now. This field is automatically populated by Samaritan does not require to specify by user. belong string The service name which this instance belongs to. It's required when you want to change the behavior of Sam at runtime, such as update proxy policy, update service endpoints, etc. If two instances belong to the same service, it will be treated in one group. Top common/address.proto \u00b6 Address \u00b6 Field Type Label Description ip string IP address, IPv4 or IPv6. port uint32 Port, [0, 65535]. Top service/endpoint.proto \u00b6 Endpoint \u00b6 Field Type Label Description address common.Address Address of endpoint, must be set. state Endpoint.State Healthy state of endpoint. When state is DOWN, this host will not be selected for load balancing. type Endpoint.Type Type of endpoints. When all hosts whose type is main are in the DOWN state, the host whose type is backup will be selected. Endpoint.State \u00b6 Name Number Description UP 0 healthy DOWN 1 unhealthy UNKNOWN 2 unknown Endpoint.Type \u00b6 Name Number Description MAIN 0 main BACKUP 1 backup Top service/service.proto \u00b6 Service \u00b6 Service represents a service. Field Type Label Description name string Name of service. Top service/config.proto \u00b6 Config \u00b6 Configuration of service, contains configuration information required for the processor to run. Field Type Label Description listener Listener Listener config, must be set. health_check hc.HealthCheck Health check will be disabled when not defined. connect_timeout google.protobuf.Duration The maximum time to wait for a connection attempt to a server to succeed, default is 3s. idle_timeout google.protobuf.Duration The maximum inactivity time on the client side, default is 10min. lb_policy LoadBalancePolicy protocol protocol.Protocol Protocol of service, can not be UNKNOWN. tcp_option protocol.TCPOption redis_option protocol.RedisOption mysql_option protocol.MySQLOption Listener \u00b6 Listener configuration. Field Type Label Description address common.Address The address that the listener should listen on, must be set. connection_limit uint32 The limit of connections, new connections that exceed this value are immediately be closed. Default value is 0 that the limit will be disable. LoadBalancePolicy \u00b6 Load balance policy. Name Number Description ROUND_ROBIN 0 RoundRobin LEAST_CONNECTION 1 LeastConnection RANDOM 2 Random CLUSTER_PROVIDED 3 Provided by redis cluster Scalar Value Types \u00b6 .proto Type Notes C++ Type Java Type Python Type double double double float float float float float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long uint32 Uses variable-length encoding. uint32 int int/long uint64 Uses variable-length encoding. uint64 long int/long sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long sfixed32 Always four bytes. int32 int int sfixed64 Always eight bytes. int64 long int/long bool bool boolean boolean string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode bytes May contain any arbitrary sequence of bytes. string ByteString str","title":"Proto Reference"},{"location":"proto-ref/#protocol-documentation","text":"","title":"Protocol Documentation"},{"location":"proto-ref/#table-of-contents","text":"discovery.proto SvcConfigDiscoveryRequest SvcConfigDiscoveryResponse SvcConfigDiscoveryResponse.UpdatedEntry SvcDiscoveryRequest SvcDiscoveryResponse SvcEndpointDiscoveryRequest SvcEndpointDiscoveryResponse DiscoveryService bootstrap/bootstrap.proto Admin Bootstrap ConfigSource Log Log.Output Sink StaticService Stats Log.Level Log.Output.Type Sink.Type hc/hc.proto ATCPChecker ATCPChecker.Action HealthCheck MySQLChecker RedisChecker TCPChecker protocol/protocol.proto MySQLOption RedisOption TCPOption Protocol RedisOption.ReadStrategy common/instance.proto Instance common/address.proto Address service/endpoint.proto Endpoint Endpoint.State Endpoint.Type service/service.proto Service service/config.proto Config Listener LoadBalancePolicy Scalar Value Types Top","title":"Table of Contents"},{"location":"proto-ref/#discoveryproto","text":"","title":"discovery.proto"},{"location":"proto-ref/#svcconfigdiscoveryrequest","text":"Field Type Label Description svc_names_subscribe string repeated All service names that need to subscribe. svc_names_unsubscribe string repeated All service names that need to unsubscribe.","title":"SvcConfigDiscoveryRequest"},{"location":"proto-ref/#svcconfigdiscoveryresponse","text":"Field Type Label Description updated SvcConfigDiscoveryResponse.UpdatedEntry repeated Update of configuration.","title":"SvcConfigDiscoveryResponse"},{"location":"proto-ref/#svcconfigdiscoveryresponseupdatedentry","text":"Field Type Label Description key string value service.Config","title":"SvcConfigDiscoveryResponse.UpdatedEntry"},{"location":"proto-ref/#svcdiscoveryrequest","text":"Field Type Label Description instance common.Instance Meta information of the current instance.","title":"SvcDiscoveryRequest"},{"location":"proto-ref/#svcdiscoveryresponse","text":"Field Type Label Description added service.Service repeated Added service. removed service.Service repeated Removed service.","title":"SvcDiscoveryResponse"},{"location":"proto-ref/#svcendpointdiscoveryrequest","text":"Field Type Label Description svc_names_subscribe string repeated All service names that need to subscribe. svc_names_unsubscribe string repeated All service names that need to unsubscribe.","title":"SvcEndpointDiscoveryRequest"},{"location":"proto-ref/#svcendpointdiscoveryresponse","text":"Field Type Label Description svc_name string Name of service which endpoints had updated. added service.Endpoint repeated Added endpoints. removed service.Endpoint repeated Removed endpoints.","title":"SvcEndpointDiscoveryResponse"},{"location":"proto-ref/#discoveryservice","text":"DiscoveryService is a service which is used to discover service, service config and service endpoints. Method Name Request Type Response Type Description StreamSvcs SvcDiscoveryRequest SvcDiscoveryResponse stream StreamSvcConfigs SvcConfigDiscoveryRequest stream SvcConfigDiscoveryResponse stream StreamSvcEndpoints SvcEndpointDiscoveryRequest stream SvcEndpointDiscoveryResponse stream Top","title":"DiscoveryService"},{"location":"proto-ref/#bootstrapbootstrapproto","text":"","title":"bootstrap/bootstrap.proto"},{"location":"proto-ref/#admin","text":"The admin message is required to configure the administration server. Field Type Label Description bind common.Address The TCP address that the administration server will listen on, not null.","title":"Admin"},{"location":"proto-ref/#bootstrap","text":"This message is supplied via '-config' cli flag and act as the root of configuration. Field Type Label Description instance common.Instance The instance contains the meta information of the current instance. log Log Configuration for log. stats Stats Configuration for stats. admin Admin Configuration for the local administration HTTP server. static_services StaticService repeated Statically specified services. dynamic_source_config ConfigSource Configuration for dynamic source config.","title":"Bootstrap"},{"location":"proto-ref/#configsource","text":"Configuration for dynamic source config. Field Type Label Description endpoint string The gRPC endpoint of dynamic source config service, not null.","title":"ConfigSource"},{"location":"proto-ref/#log","text":"Log config. Field Type Label Description level Log.Level Logging level output Log.Output Output target configuration, support send log to stdout or syslog, use stdout as default.","title":"Log"},{"location":"proto-ref/#logoutput","text":"Field Type Label Description type Log.Output.Type Type of output target. target string Address of server which is required when SYSLOG is selected.","title":"Log.Output"},{"location":"proto-ref/#sink","text":"Sink is a sink for stats. Each Sink is responsible for writing stats to a backing store. Field Type Label Description type Sink.Type endpoint string Sink endpoint, not empty.","title":"Sink"},{"location":"proto-ref/#staticservice","text":"The wrapper of service config and endpoints. Field Type Label Description name string The name of service. config service.Config The proxy strategy of service. endpoints service.Endpoint repeated The endpoints of service. Need at least one endpoint.","title":"StaticService"},{"location":"proto-ref/#stats","text":"Stats config. Field Type Label Description sinks Sink repeated Optional set of stats sinks.","title":"Stats"},{"location":"proto-ref/#loglevel","text":"Name Number Description INFO 0 Print base messages during running. This is in addition to warnings and errors. DEBUG -1 Print everything, including debugging information. WARING 1 Print all warnings and errors. ERROR 2 Print all errors. QUIET 3 Print nothing.","title":"Log.Level"},{"location":"proto-ref/#logoutputtype","text":"Name Number Description STDOUT 0 stdout SYSLOG 1 syslog","title":"Log.Output.Type"},{"location":"proto-ref/#sinktype","text":"Sink type Name Number Description UNKNOWN 0 STATSD 1 statsd Top","title":"Sink.Type"},{"location":"proto-ref/#hchcproto","text":"","title":"hc/hc.proto"},{"location":"proto-ref/#atcpchecker","text":"ATCP checker config. Field Type Label Description action ATCPChecker.Action repeated List of actions. All actions will execute during the health check, if one of the actions fails, this health check will be considered as failed. Need at least one action.","title":"ATCPChecker"},{"location":"proto-ref/#atcpcheckeraction","text":"Action represents a set of requests from Samaritan to the server and what the expected server returns. Field Type Label Description send bytes This is used to send a data along with a connection opening. expect bytes Expecting content returned from the server.","title":"ATCPChecker.Action"},{"location":"proto-ref/#healthcheck","text":"Configuration of health check. Field Type Label Description interval google.protobuf.Duration The interval between two consecutive health checks. Must be greater than 0s. timeout google.protobuf.Duration The timeout when doing a health check. Must be greater than 0s. fall_threshold uint32 A server will be considered as dead after # consecutive unsuccessful health checks. Must be greater than 0. rise_threshold uint32 A server will be considered as operational after # consecutive successful health checks. Must be greater than 0. tcp_checker TCPChecker atcp_checker ATCPChecker mysql_checker MySQLChecker redis_checker RedisChecker","title":"HealthCheck"},{"location":"proto-ref/#mysqlchecker","text":"MySQL checker config. Field Type Label Description username string MySQL server username, not null.","title":"MySQLChecker"},{"location":"proto-ref/#redischecker","text":"Redis checker config. Field Type Label Description password string Redis server password, if the password is not empty, the AUTH command will be sent before the PING command.","title":"RedisChecker"},{"location":"proto-ref/#tcpchecker","text":"TCP checker config. Top","title":"TCPChecker"},{"location":"proto-ref/#protocolprotocolproto","text":"","title":"protocol/protocol.proto"},{"location":"proto-ref/#mysqloption","text":"MySQL protocol option.","title":"MySQLOption"},{"location":"proto-ref/#redisoption","text":"Redis protocol option. Field Type Label Description read_strategy RedisOption.ReadStrategy Strategy of a read only command.","title":"RedisOption"},{"location":"proto-ref/#tcpoption","text":"TCP protocol option.","title":"TCPOption"},{"location":"proto-ref/#protocol","text":"Protocol enum. Name Number Description UNKNOWN 0 TCP 1 TCP MySQL 2 MySQL Redis 3 Redis","title":"Protocol"},{"location":"proto-ref/#redisoptionreadstrategy","text":"Name Number Description MASTER 0 Read from master nodes. SLAVE 1 Read from slave nodes. BOTH 2 Read from all nodes. Top","title":"RedisOption.ReadStrategy"},{"location":"proto-ref/#commoninstanceproto","text":"","title":"common/instance.proto"},{"location":"proto-ref/#instance","text":"Field Type Label Description id string The id of this instance, if id is not define, it will generate by ip and admin port. version string Version of this instance running now. This field is automatically populated by Samaritan does not require to specify by user. belong string The service name which this instance belongs to. It's required when you want to change the behavior of Sam at runtime, such as update proxy policy, update service endpoints, etc. If two instances belong to the same service, it will be treated in one group. Top","title":"Instance"},{"location":"proto-ref/#commonaddressproto","text":"","title":"common/address.proto"},{"location":"proto-ref/#address","text":"Field Type Label Description ip string IP address, IPv4 or IPv6. port uint32 Port, [0, 65535]. Top","title":"Address"},{"location":"proto-ref/#serviceendpointproto","text":"","title":"service/endpoint.proto"},{"location":"proto-ref/#endpoint","text":"Field Type Label Description address common.Address Address of endpoint, must be set. state Endpoint.State Healthy state of endpoint. When state is DOWN, this host will not be selected for load balancing. type Endpoint.Type Type of endpoints. When all hosts whose type is main are in the DOWN state, the host whose type is backup will be selected.","title":"Endpoint"},{"location":"proto-ref/#endpointstate","text":"Name Number Description UP 0 healthy DOWN 1 unhealthy UNKNOWN 2 unknown","title":"Endpoint.State"},{"location":"proto-ref/#endpointtype","text":"Name Number Description MAIN 0 main BACKUP 1 backup Top","title":"Endpoint.Type"},{"location":"proto-ref/#serviceserviceproto","text":"","title":"service/service.proto"},{"location":"proto-ref/#service","text":"Service represents a service. Field Type Label Description name string Name of service. Top","title":"Service"},{"location":"proto-ref/#serviceconfigproto","text":"","title":"service/config.proto"},{"location":"proto-ref/#config","text":"Configuration of service, contains configuration information required for the processor to run. Field Type Label Description listener Listener Listener config, must be set. health_check hc.HealthCheck Health check will be disabled when not defined. connect_timeout google.protobuf.Duration The maximum time to wait for a connection attempt to a server to succeed, default is 3s. idle_timeout google.protobuf.Duration The maximum inactivity time on the client side, default is 10min. lb_policy LoadBalancePolicy protocol protocol.Protocol Protocol of service, can not be UNKNOWN. tcp_option protocol.TCPOption redis_option protocol.RedisOption mysql_option protocol.MySQLOption","title":"Config"},{"location":"proto-ref/#listener","text":"Listener configuration. Field Type Label Description address common.Address The address that the listener should listen on, must be set. connection_limit uint32 The limit of connections, new connections that exceed this value are immediately be closed. Default value is 0 that the limit will be disable.","title":"Listener"},{"location":"proto-ref/#loadbalancepolicy","text":"Load balance policy. Name Number Description ROUND_ROBIN 0 RoundRobin LEAST_CONNECTION 1 LeastConnection RANDOM 2 Random CLUSTER_PROVIDED 3 Provided by redis cluster","title":"LoadBalancePolicy"},{"location":"proto-ref/#scalar-value-types","text":".proto Type Notes C++ Type Java Type Python Type double double double float float float float float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long uint32 Uses variable-length encoding. uint32 int int/long uint64 Uses variable-length encoding. uint64 long int/long sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long sfixed32 Always four bytes. int32 int int sfixed64 Always eight bytes. int64 long int/long bool bool boolean boolean string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode bytes May contain any arbitrary sequence of bytes. string ByteString str","title":"Scalar Value Types"},{"location":"start/","text":"Getting Started \u00b6 This section describes how to get started quickly and provides some sample configurations. Installation \u00b6 Pre-built binaries \u00b6 It's the fastest way, you can choose the appropriate binaries from release page . Assuming your os system is darwin and platform is amd64, you can use the following command to download and install. $ VERSION = 1 .0.0 OS = darwin ARCH = amd64 curl -fsSL \\ https://github.com/samaritan-proxy/samaritan/releases/download/v $VERSION /samaritan $VERSION . $OS - $ARCH .tar.gz \\ -o /tmp/samaritan- $VERSION .tar.gz && \\ tar -zxvf /tmp/samaritan- $VERSION .tar.gz && \\ install /tmp/samaritan- $VERSION /samaritan /usr/local/bin Note You should replace the version, os system and arch information in download link as needed. Manually build \u00b6 If the pre-built binaries doesn't meet your needs or want to try the lastest features which are not released, you could build it from the source code. This first needs Go installed(version 1.13+ is required). Warning The master branch is in continuous development and has not undergone the extensive testing and verification. There may be some unknown problems, please do not use it directly for production. $ git clone https://github.com/samaritan-proxy/samaritan.git $ cd samaritan && make $ install ./bin/samaritan /usr/local/bin Running simple example \u00b6 The following is an example of using Sam as a L4 layer TCP proxy to access example.com Terminal 1 $ # resolve example.com, get ip $ ip = $( dig +short example.com | head -1 ) $ # generate config file $ sudo bash -c 'cat > /etc/samaritan.yaml' <<EOF admin: bind: ip: 127.0.0.1 port: 12345 log: level: INFO static_services: - name: exmaple.com config: listener: address: ip: 0.0.0.0 port: 8080 protocol: TCP endpoints: - address: ip: $ip port: 80 EOF $ # start samaritan $ samaritan I 2019 /10/18 15 :10:38.067913 samaritan.go:60: stats config is empty I 2019 /10/18 15 :10:38.068501 samaritan.go:184: Using CPUs: 4 I 2019 /10/18 15 :10:38.068513 samaritan.go:185: Version: 1 .0.0 D 2019 /10/18 15 :10:38.068579 config.go:114: Disable dynamic config I 2019 /10/18 15 :10:38.070397 server.go:39: Starting HTTP server at 0 .0.0.0:12345 I 2019 /10/18 15 :10:38.070534 samaritan.go:89: PID: 60289 I 2019 /10/18 15 :10:38.072735 monitor.go:48: health check config is null, healthy check will disable I 2019 /10/18 15 :10:38.074646 controller.go:110: Add processor exmaple I 2019 /10/18 15 :10:38.093603 listener.go:105: [ exmaple ] start serving at 0 .0.0.0:8080 Tip You could store the config file anywhere you like and can find. Terminal 2 $ curl -v -I -H \"Host: example.com\" http://127.0.0.1:8080 * Rebuilt URL to: http://127.0.0.1:8080/ * Trying 127 .0.0.1... * TCP_NODELAY set * Connected to 127 .0.0.1 ( 127 .0.0.1 ) port 8080 ( #0) > HEAD / HTTP/1.1 > Host: example.com > User-Agent: curl/7.54.0 > Accept: */* > < HTTP/1.1 200 OK HTTP/1.1 200 OK < Accept-Ranges: bytes Accept-Ranges: bytes < Cache-Control: max-age = 604800 Cache-Control: max-age = 604800 < Content-Type: text/html ; charset = UTF-8 Content-Type: text/html ; charset = UTF-8 < Date: Fri, 18 Oct 2019 07 :26:11 GMT Date: Fri, 18 Oct 2019 07 :26:11 GMT < Etag: \"3147526947+gzip+ident\" Etag: \"3147526947+gzip+ident\" < Expires: Fri, 25 Oct 2019 07 :26:11 GMT Expires: Fri, 25 Oct 2019 07 :26:11 GMT < Last-Modified: Thu, 17 Oct 2019 07 :18:26 GMT Last-Modified: Thu, 17 Oct 2019 07 :18:26 GMT < Server: ECS ( sjc/4E74 ) Server: ECS ( sjc/4E74 ) < X-Cache: HIT X-Cache: HIT < Content-Length: 1256 Content-Length: 1256 < * Connection #0 to host 127.0.0.1 left intact As you can see, we visited example.com via Sam. Configuration \u00b6 In the aboved section, we generate a simple configuration file and start Sam with it. But you may have no idea about it, you may be overwhelmed. For better understanding, we will show you the specific parts of the configuration file. instance \u00b6 The instance message is used to specify the environment in which the instance is located, and will be reported to the management server. instance : id : ip_port belong : sash Warning If you want to use the dynamic config feature, you must add this section to configuration file. log \u00b6 The log message is used to specify the log level and output destination. log : level : INFO output : type : SYSLOG target : 127.0.0.1:514 If it is omitted, the log level will be INFO and the message will be printed to terminal. Why does the output not support files If the disk io hang, the whole process will probably hang when not handled correctly, we don't want this to happen. There are a lot mature toolkit to process logs in linux system, such as ryslog and logrotate. We should reuse them instead of creating ourselves. stats \u00b6 The stats message is used to specify the stats config include internal metrics config and sinks. stats : sinks : - type : STATSD endpoint : example.com:8125 If it is omitted, the internal metrics wouldn't flush to any TSDB except Prometheus which could still be visited via /amin/stats/prometheus . Prometheus is sufficient for most users which means you could omit the stats config directly. admin \u00b6 The admin message is used to specify the configuration for local admin api. admin : bind : ip : 127.0.0.1 port : 12345 It's required, otherwise the entire process cannot be started. More details about admin api, you can view doc static services \u00b6 The static service message is used to specify the static service including name, proxy strategy and endpoints. static_services : - name : example.com config : listener : address : ip : 127.0.0.1 port : 8080 protocol : TCP endpoints : - address : ip : 93.184.216.34 port : 80 You can use it to configure the proxy's services in a local development environment, but it is not recommended. Here are the reasons: Contains a lot configuraton items, easy to make mistakes when writing by hand. Unable to support large-scale operation and maintenance, imagine how to update the configuration if deployed to a 10k machines. It's so horrible. The correct and recommended way is to use dynamic source, which will be described in detail below. dynamic source \u00b6 The dynamic source message is used to specify the dynamic source configuration. dynamic_source_config : endpoint : example.com:80 Once the dynamic source is configured, Sam could know and apply the changes of instance's dependent services, service's proxy policy and service's endpoints in real time. The communication way between them is grpc, and here is the specific interface definition. Tip As the management server, Sash will implement all the interface required by dynamic source. It is still private now, but we will open source as soon as possible. Examples \u00b6 TBD","title":"Getting Started"},{"location":"start/#getting-started","text":"This section describes how to get started quickly and provides some sample configurations.","title":"Getting Started"},{"location":"start/#installation","text":"","title":"Installation"},{"location":"start/#pre-built-binaries","text":"It's the fastest way, you can choose the appropriate binaries from release page . Assuming your os system is darwin and platform is amd64, you can use the following command to download and install. $ VERSION = 1 .0.0 OS = darwin ARCH = amd64 curl -fsSL \\ https://github.com/samaritan-proxy/samaritan/releases/download/v $VERSION /samaritan $VERSION . $OS - $ARCH .tar.gz \\ -o /tmp/samaritan- $VERSION .tar.gz && \\ tar -zxvf /tmp/samaritan- $VERSION .tar.gz && \\ install /tmp/samaritan- $VERSION /samaritan /usr/local/bin Note You should replace the version, os system and arch information in download link as needed.","title":"Pre-built binaries"},{"location":"start/#manually-build","text":"If the pre-built binaries doesn't meet your needs or want to try the lastest features which are not released, you could build it from the source code. This first needs Go installed(version 1.13+ is required). Warning The master branch is in continuous development and has not undergone the extensive testing and verification. There may be some unknown problems, please do not use it directly for production. $ git clone https://github.com/samaritan-proxy/samaritan.git $ cd samaritan && make $ install ./bin/samaritan /usr/local/bin","title":"Manually build"},{"location":"start/#running-simple-example","text":"The following is an example of using Sam as a L4 layer TCP proxy to access example.com Terminal 1 $ # resolve example.com, get ip $ ip = $( dig +short example.com | head -1 ) $ # generate config file $ sudo bash -c 'cat > /etc/samaritan.yaml' <<EOF admin: bind: ip: 127.0.0.1 port: 12345 log: level: INFO static_services: - name: exmaple.com config: listener: address: ip: 0.0.0.0 port: 8080 protocol: TCP endpoints: - address: ip: $ip port: 80 EOF $ # start samaritan $ samaritan I 2019 /10/18 15 :10:38.067913 samaritan.go:60: stats config is empty I 2019 /10/18 15 :10:38.068501 samaritan.go:184: Using CPUs: 4 I 2019 /10/18 15 :10:38.068513 samaritan.go:185: Version: 1 .0.0 D 2019 /10/18 15 :10:38.068579 config.go:114: Disable dynamic config I 2019 /10/18 15 :10:38.070397 server.go:39: Starting HTTP server at 0 .0.0.0:12345 I 2019 /10/18 15 :10:38.070534 samaritan.go:89: PID: 60289 I 2019 /10/18 15 :10:38.072735 monitor.go:48: health check config is null, healthy check will disable I 2019 /10/18 15 :10:38.074646 controller.go:110: Add processor exmaple I 2019 /10/18 15 :10:38.093603 listener.go:105: [ exmaple ] start serving at 0 .0.0.0:8080 Tip You could store the config file anywhere you like and can find. Terminal 2 $ curl -v -I -H \"Host: example.com\" http://127.0.0.1:8080 * Rebuilt URL to: http://127.0.0.1:8080/ * Trying 127 .0.0.1... * TCP_NODELAY set * Connected to 127 .0.0.1 ( 127 .0.0.1 ) port 8080 ( #0) > HEAD / HTTP/1.1 > Host: example.com > User-Agent: curl/7.54.0 > Accept: */* > < HTTP/1.1 200 OK HTTP/1.1 200 OK < Accept-Ranges: bytes Accept-Ranges: bytes < Cache-Control: max-age = 604800 Cache-Control: max-age = 604800 < Content-Type: text/html ; charset = UTF-8 Content-Type: text/html ; charset = UTF-8 < Date: Fri, 18 Oct 2019 07 :26:11 GMT Date: Fri, 18 Oct 2019 07 :26:11 GMT < Etag: \"3147526947+gzip+ident\" Etag: \"3147526947+gzip+ident\" < Expires: Fri, 25 Oct 2019 07 :26:11 GMT Expires: Fri, 25 Oct 2019 07 :26:11 GMT < Last-Modified: Thu, 17 Oct 2019 07 :18:26 GMT Last-Modified: Thu, 17 Oct 2019 07 :18:26 GMT < Server: ECS ( sjc/4E74 ) Server: ECS ( sjc/4E74 ) < X-Cache: HIT X-Cache: HIT < Content-Length: 1256 Content-Length: 1256 < * Connection #0 to host 127.0.0.1 left intact As you can see, we visited example.com via Sam.","title":"Running simple example"},{"location":"start/#configuration","text":"In the aboved section, we generate a simple configuration file and start Sam with it. But you may have no idea about it, you may be overwhelmed. For better understanding, we will show you the specific parts of the configuration file.","title":"Configuration"},{"location":"start/#instance","text":"The instance message is used to specify the environment in which the instance is located, and will be reported to the management server. instance : id : ip_port belong : sash Warning If you want to use the dynamic config feature, you must add this section to configuration file.","title":"instance"},{"location":"start/#log","text":"The log message is used to specify the log level and output destination. log : level : INFO output : type : SYSLOG target : 127.0.0.1:514 If it is omitted, the log level will be INFO and the message will be printed to terminal. Why does the output not support files If the disk io hang, the whole process will probably hang when not handled correctly, we don't want this to happen. There are a lot mature toolkit to process logs in linux system, such as ryslog and logrotate. We should reuse them instead of creating ourselves.","title":"log"},{"location":"start/#stats","text":"The stats message is used to specify the stats config include internal metrics config and sinks. stats : sinks : - type : STATSD endpoint : example.com:8125 If it is omitted, the internal metrics wouldn't flush to any TSDB except Prometheus which could still be visited via /amin/stats/prometheus . Prometheus is sufficient for most users which means you could omit the stats config directly.","title":"stats"},{"location":"start/#admin","text":"The admin message is used to specify the configuration for local admin api. admin : bind : ip : 127.0.0.1 port : 12345 It's required, otherwise the entire process cannot be started. More details about admin api, you can view doc","title":"admin"},{"location":"start/#static-services","text":"The static service message is used to specify the static service including name, proxy strategy and endpoints. static_services : - name : example.com config : listener : address : ip : 127.0.0.1 port : 8080 protocol : TCP endpoints : - address : ip : 93.184.216.34 port : 80 You can use it to configure the proxy's services in a local development environment, but it is not recommended. Here are the reasons: Contains a lot configuraton items, easy to make mistakes when writing by hand. Unable to support large-scale operation and maintenance, imagine how to update the configuration if deployed to a 10k machines. It's so horrible. The correct and recommended way is to use dynamic source, which will be described in detail below.","title":"static services"},{"location":"start/#dynamic-source","text":"The dynamic source message is used to specify the dynamic source configuration. dynamic_source_config : endpoint : example.com:80 Once the dynamic source is configured, Sam could know and apply the changes of instance's dependent services, service's proxy policy and service's endpoints in real time. The communication way between them is grpc, and here is the specific interface definition. Tip As the management server, Sash will implement all the interface required by dynamic source. It is still private now, but we will open source as soon as possible.","title":"dynamic source"},{"location":"start/#examples","text":"TBD","title":"Examples"},{"location":"arch/admin-api/","text":"Admin API \u00b6 GET /config \u00b6 Return all configuration info. { \"admin\" : { \"bind\" : { \"ip\" : \"0.0.0.0\" , \"port\" : 12345 } }, \"services\" : { \"example.service\" : { \"name\" : \"example.service\" , \"config\" : { \"listener\" : { \"address\" : { \"ip\" : \"0.0.0.0\" , \"port\" : 8000 } }, \"healthCheck\" : { \"interval\" : \"10s\" , \"timeout\" : \"3s\" , \"fallThreshold\" : 3 , \"riseThreshold\" : 3 , \"tcpChecker\" : {} }, \"connectTimeout\" : \"3s\" , \"idleTimeout\" : \"600s\" , \"lbPolicy\" : \"LEAST_CONNECTION\" , \"protocol\" : \"TCP\" }, \"endpoints\" : [ { \"address\" : { \"ip\" : \"10.0.0.1\" , \"port\" : 8000 } }, { \"address\" : { \"ip\" : \"10.0.0.2\" , \"port\" : 8000 } } ] } } } GET /ops/shutdown \u00b6 Immediately shut down the Samaritan. { \"msg\" : \"OK\" } GET /stats \u00b6 Return all statistics for local debugging. live: 1 runtime.alloc_bytes: 2222568 runtime.frees: 23281 runtime.gc_pause_total_ms: 0 runtime.gc_total: 0 runtime.goroutines: 10 runtime.heap_alloc_bytes: 2222568 runtime.heap_idle_bytes: 62750720 ... GET /stats/prometheus \u00b6 Return /stats in Prometheus format . # TYPE samaritan_service_downstream_cx_active gauge samaritan_service_downstream_cx_active{hostname=\"localhost\",service_name=\"service_01\"} 0 # TYPE samaritan_service_upstream_cx_active gauge samaritan_service_upstream_cx_active{hostname=\"localhost\",service_name=\"service_01\"} 0 # TYPE samaritan_live gauge samaritan_live{hostname=\"localhost\"} 1 ...","title":"Admin API"},{"location":"arch/admin-api/#admin-api","text":"","title":"Admin API"},{"location":"arch/admin-api/#get-config","text":"Return all configuration info. { \"admin\" : { \"bind\" : { \"ip\" : \"0.0.0.0\" , \"port\" : 12345 } }, \"services\" : { \"example.service\" : { \"name\" : \"example.service\" , \"config\" : { \"listener\" : { \"address\" : { \"ip\" : \"0.0.0.0\" , \"port\" : 8000 } }, \"healthCheck\" : { \"interval\" : \"10s\" , \"timeout\" : \"3s\" , \"fallThreshold\" : 3 , \"riseThreshold\" : 3 , \"tcpChecker\" : {} }, \"connectTimeout\" : \"3s\" , \"idleTimeout\" : \"600s\" , \"lbPolicy\" : \"LEAST_CONNECTION\" , \"protocol\" : \"TCP\" }, \"endpoints\" : [ { \"address\" : { \"ip\" : \"10.0.0.1\" , \"port\" : 8000 } }, { \"address\" : { \"ip\" : \"10.0.0.2\" , \"port\" : 8000 } } ] } } }","title":"GET /config"},{"location":"arch/admin-api/#get-opsshutdown","text":"Immediately shut down the Samaritan. { \"msg\" : \"OK\" }","title":"GET /ops/shutdown"},{"location":"arch/admin-api/#get-stats","text":"Return all statistics for local debugging. live: 1 runtime.alloc_bytes: 2222568 runtime.frees: 23281 runtime.gc_pause_total_ms: 0 runtime.gc_total: 0 runtime.goroutines: 10 runtime.heap_alloc_bytes: 2222568 runtime.heap_idle_bytes: 62750720 ...","title":"GET /stats"},{"location":"arch/admin-api/#get-statsprometheus","text":"Return /stats in Prometheus format . # TYPE samaritan_service_downstream_cx_active gauge samaritan_service_downstream_cx_active{hostname=\"localhost\",service_name=\"service_01\"} 0 # TYPE samaritan_service_upstream_cx_active gauge samaritan_service_upstream_cx_active{hostname=\"localhost\",service_name=\"service_01\"} 0 # TYPE samaritan_live gauge samaritan_live{hostname=\"localhost\"} 1 ...","title":"GET /stats/prometheus"},{"location":"arch/overview/","text":"Overview \u00b6 Admin API \u00b6 An HTTP service for viewing Samaritan's runtime information, include config, stats. Admin API Reference Config \u00b6 Store service configuration, process services and configuration updates, and notify the Controller. Static Read and parse service configuration from bootstrap file. Work only when init config. Dynamic The gRPC delivers service and service configuration information. Controller \u00b6 Control proc creation, destruction, and runtime behavior. Proc \u00b6 The smallest processing unit used to proxy a real service, different protocols can have their own implementation. Hot Reloader \u00b6 Responsible for smooth upgrades to Samaritan without downtime, use SO_REUSEPORT . The new Samaritan instance use UNIX socket to communicate with the old samaritan instance. sequenceDiagram participant new as New Samaritan participant old as Old Samaritan new ->> old: Dail to UNIX socket new ->> new: Start controller new ->> old: Shutdown admin request old ->> old: Shutdown admin new ->> new: Start admin new ->> new: Start listeners new ->> old: Drain listeners request old ->> old: Drain listeners new ->> old: Terminate parent request old ->> old: Terminate Workflow \u00b6 sequenceDiagram participant cfg as Config participant ctl as Controller participant proc as Proc cfg ->> ctl: New service event ctl ->> +proc: Create new proc cfg ->> ctl: Endpoints add event ctl ->> proc: Call OnSvcHostAdd() cfg ->> ctl: Endpoints remove event ctl ->> proc: Call OnSvcHostRemove() cfg ->> ctl: Config update event ctl ->> proc: Call OnSvcConfigUpdate() cfg ->> ctl: Del service event ctl ->> -proc: Call Stop()","title":"Overview"},{"location":"arch/overview/#overview","text":"","title":"Overview"},{"location":"arch/overview/#admin-api","text":"An HTTP service for viewing Samaritan's runtime information, include config, stats. Admin API Reference","title":"Admin API"},{"location":"arch/overview/#config","text":"Store service configuration, process services and configuration updates, and notify the Controller. Static Read and parse service configuration from bootstrap file. Work only when init config. Dynamic The gRPC delivers service and service configuration information.","title":"Config"},{"location":"arch/overview/#controller","text":"Control proc creation, destruction, and runtime behavior.","title":"Controller"},{"location":"arch/overview/#proc","text":"The smallest processing unit used to proxy a real service, different protocols can have their own implementation.","title":"Proc"},{"location":"arch/overview/#hot-reloader","text":"Responsible for smooth upgrades to Samaritan without downtime, use SO_REUSEPORT . The new Samaritan instance use UNIX socket to communicate with the old samaritan instance. sequenceDiagram participant new as New Samaritan participant old as Old Samaritan new ->> old: Dail to UNIX socket new ->> new: Start controller new ->> old: Shutdown admin request old ->> old: Shutdown admin new ->> new: Start admin new ->> new: Start listeners new ->> old: Drain listeners request old ->> old: Drain listeners new ->> old: Terminate parent request old ->> old: Terminate","title":"Hot Reloader"},{"location":"arch/overview/#workflow","text":"sequenceDiagram participant cfg as Config participant ctl as Controller participant proc as Proc cfg ->> ctl: New service event ctl ->> +proc: Create new proc cfg ->> ctl: Endpoints add event ctl ->> proc: Call OnSvcHostAdd() cfg ->> ctl: Endpoints remove event ctl ->> proc: Call OnSvcHostRemove() cfg ->> ctl: Config update event ctl ->> proc: Call OnSvcConfigUpdate() cfg ->> ctl: Del service event ctl ->> -proc: Call Stop()","title":"Workflow"},{"location":"arch/stats/","text":"Stats \u00b6 Samaritan provide detailed metrics about connection and request which could help us understand the state of network and services, make decisions. Types of statistics: Counters: Unsigned integers that only increase and never decrease. Gauges: Unsigned integers that both increase and decrease. Histograms: Unsigned integers that are part of a stream of values that are then aggregated by the collector to ultimately yield summarized percentile values. Statistics \u00b6 Global \u00b6 Name Type Description live Gauge live status Runtime \u00b6 Name Type Description runtime.gc_total Counter Count of GC runtime.gc_pause_us Histogram GC pause duration runtime.goroutines Gauge Num of goroutines runtime.gc_pause_total_ms Gauge Total gc pause time runtime.alloc_bytes Gauge Alloc is bytes of allocated heap objects runtime.total_alloc_bytes Gauge Cumulative bytes allocated for heap objects runtime.sys_bytes Gauge Total bytes of memory obtained from the OS runtime.heap_alloc_bytes Gauge HeapAlloc is bytes of allocated heap objects runtime.heap_sys_bytes Gauge Bytes of heap memory obtained from the OS runtime.heap_idle_bytes Gauge Bytes in idle (unused) spans runtime.heap_inuse_bytes Gauge Bytes in in-use spans runtime.heap_released_bytes Gauge Bytes of physical memory returned to the OS runtime.heap_objects Gauge The number of allocated heap objects runtime.stack_inuse_bytes Gauge Bytes in stack spans runtime.stack_sys_bytes Gauge Bytes of stack memory obtained from the OS runtime.lookups Gauge The number of pointer lookups performed by the runtime runtime.mallocs Gauge The cumulative count of heap objects allocated runtime.frees Gauge The cumulative count of heap objects freed Service \u00b6 Common \u00b6 L4 \u00b6 prefix: service.{service_name}. Name Type Description downstream.cx_total Counter downstream total connections downstream.cx_destroy_total Counter downstream destroyed connections downstream.cx_active Gauge downstream active connections downstream.cx_length_sec Histogram downstream connection length downstream.cx_rx_bytes_total Counter downstream received connection bytes downstream.cx_tx_bytes_total Counter downstream sent connection bytes downstream.cx_restricted Counter downstream restricted connections upstream.cx_total Counter upstream total connections upstream.cx_destroy_total Counter upstream destroyed connections upstream.cx_active Counter upstream active connections upstream.cx_length_sec Histogram upstream connection length upstream.cx_rx_bytes_total Counter upstream received connection bytes upstream.cx_tx_bytes_total Counter upstream sent connection bytes upstream.cx_connect_timeout Counter upstream total connection connect timeouts upstream.cx_connect_fail Counter upstream connection failures L7 \u00b6 prefix: service.{service_name}. Name Type Description downstream.rq_total Counter downstream total request downstream.rq_success_total Counter downstream success request downstream.rq_failure_total Counter downstream failed request downstream.rq_active Gauge downstream active request downstream.rq_duration_ms Histogram downstream request duration downstream.rq_rx_bytes_length Histogram downstream received request bytes length downstream.rq_tx_bytes_length Histogram downstream sent request bytes length upstream.rq_total Counter upstream total request upstream.rq_success_total Counter upstream success request upstream.rq_failure_total Counter upstream failed request upstream.rq_active Gauge upstream active request upstream.rq_duration_ms Histogram upstream request duration upstream.rq_rx_bytes_length Histogram upstream received request bytes length upstream.rq_tx_bytes_length Histogram upstream sent request bytes length Redis \u00b6 prefix: service.{service_name}. Name Type Description slots_refresh.total Counter slots refresh total count slots_refresh.success_total Counter slots refresh success count slots_refresh.failure_total Counter slots refresh failure count redis.{COMMAND}.total Counter {COMMAND} total count redis.{COMMAND}.success Counter {COMMAND} success count redis.{COMMAND}.error Counter {COMMAND} error count redis.{COMMAND}.latency_micros Histogram {COMMAND} latency micros redis.moved Counter MOVED count","title":"Stats"},{"location":"arch/stats/#stats","text":"Samaritan provide detailed metrics about connection and request which could help us understand the state of network and services, make decisions. Types of statistics: Counters: Unsigned integers that only increase and never decrease. Gauges: Unsigned integers that both increase and decrease. Histograms: Unsigned integers that are part of a stream of values that are then aggregated by the collector to ultimately yield summarized percentile values.","title":"Stats"},{"location":"arch/stats/#statistics","text":"","title":"Statistics"},{"location":"arch/stats/#global","text":"Name Type Description live Gauge live status","title":"Global"},{"location":"arch/stats/#runtime","text":"Name Type Description runtime.gc_total Counter Count of GC runtime.gc_pause_us Histogram GC pause duration runtime.goroutines Gauge Num of goroutines runtime.gc_pause_total_ms Gauge Total gc pause time runtime.alloc_bytes Gauge Alloc is bytes of allocated heap objects runtime.total_alloc_bytes Gauge Cumulative bytes allocated for heap objects runtime.sys_bytes Gauge Total bytes of memory obtained from the OS runtime.heap_alloc_bytes Gauge HeapAlloc is bytes of allocated heap objects runtime.heap_sys_bytes Gauge Bytes of heap memory obtained from the OS runtime.heap_idle_bytes Gauge Bytes in idle (unused) spans runtime.heap_inuse_bytes Gauge Bytes in in-use spans runtime.heap_released_bytes Gauge Bytes of physical memory returned to the OS runtime.heap_objects Gauge The number of allocated heap objects runtime.stack_inuse_bytes Gauge Bytes in stack spans runtime.stack_sys_bytes Gauge Bytes of stack memory obtained from the OS runtime.lookups Gauge The number of pointer lookups performed by the runtime runtime.mallocs Gauge The cumulative count of heap objects allocated runtime.frees Gauge The cumulative count of heap objects freed","title":"Runtime"},{"location":"arch/stats/#service","text":"","title":"Service"},{"location":"arch/stats/#common","text":"","title":"Common"},{"location":"arch/stats/#l4","text":"prefix: service.{service_name}. Name Type Description downstream.cx_total Counter downstream total connections downstream.cx_destroy_total Counter downstream destroyed connections downstream.cx_active Gauge downstream active connections downstream.cx_length_sec Histogram downstream connection length downstream.cx_rx_bytes_total Counter downstream received connection bytes downstream.cx_tx_bytes_total Counter downstream sent connection bytes downstream.cx_restricted Counter downstream restricted connections upstream.cx_total Counter upstream total connections upstream.cx_destroy_total Counter upstream destroyed connections upstream.cx_active Counter upstream active connections upstream.cx_length_sec Histogram upstream connection length upstream.cx_rx_bytes_total Counter upstream received connection bytes upstream.cx_tx_bytes_total Counter upstream sent connection bytes upstream.cx_connect_timeout Counter upstream total connection connect timeouts upstream.cx_connect_fail Counter upstream connection failures","title":"L4"},{"location":"arch/stats/#l7","text":"prefix: service.{service_name}. Name Type Description downstream.rq_total Counter downstream total request downstream.rq_success_total Counter downstream success request downstream.rq_failure_total Counter downstream failed request downstream.rq_active Gauge downstream active request downstream.rq_duration_ms Histogram downstream request duration downstream.rq_rx_bytes_length Histogram downstream received request bytes length downstream.rq_tx_bytes_length Histogram downstream sent request bytes length upstream.rq_total Counter upstream total request upstream.rq_success_total Counter upstream success request upstream.rq_failure_total Counter upstream failed request upstream.rq_active Gauge upstream active request upstream.rq_duration_ms Histogram upstream request duration upstream.rq_rx_bytes_length Histogram upstream received request bytes length upstream.rq_tx_bytes_length Histogram upstream sent request bytes length","title":"L7"},{"location":"arch/stats/#redis","text":"prefix: service.{service_name}. Name Type Description slots_refresh.total Counter slots refresh total count slots_refresh.success_total Counter slots refresh success count slots_refresh.failure_total Counter slots refresh failure count redis.{COMMAND}.total Counter {COMMAND} total count redis.{COMMAND}.success Counter {COMMAND} success count redis.{COMMAND}.error Counter {COMMAND} error count redis.{COMMAND}.latency_micros Histogram {COMMAND} latency micros redis.moved Counter MOVED count","title":"Redis"},{"location":"arch/protocol/tcp/","text":"TCP \u00b6 The TCP proc performs basic 1:1 network connection proxy between clients and endpoints. Statistics \u00b6 statistics reference","title":"TCP"},{"location":"arch/protocol/tcp/#tcp","text":"The TCP proc performs basic 1:1 network connection proxy between clients and endpoints.","title":"TCP"},{"location":"arch/protocol/tcp/#statistics","text":"statistics reference","title":"Statistics"},{"location":"arch/protocol/redis/redis/","text":"Redis Cluster \u00b6 Redis Processor in samaritan serves as a Redis Cluster Proxy just as corvus . It adapts the Redis Cluster Protocol to the Single Redis Protocol. In Redis Cluster Protocol, a client should be able to react to MOVED and ASK response while in a single redis protocol clients know nothing about sharding. Single Redis Protocol client -> Redis Cluster Proxy -> Redis Cluster Redis Version \u00b6 Supporting Redis <= 4.x Modified commands \u00b6 MGET : split to multiple GET . MSET : split to multiple SET . DEL : split to multiple single key DEL . EXISTS : split to multiple single key EXISTS . PING : ignored and won't be forwarded. INFO , TIME : won't be forwarded to backend redis, information collected in proxy will be returned. AUTH : do authentication in proxy. CONFIG : support get , set , and rewrite sub-command to retrieve and manipulate corvus config. SELECT : ignored if index is 0 , won't be forwarded. Restricted commands \u00b6 Warning The following commands require all argument keys to belong to the same redis node. EVAL : At least one key should be given. SDIFF , SDIFFSTORE , SINTER , SINTERSTORE , SMOVE , SUNION , SUNIONSTORE . ZINTERSTORE , ZUNIONSTORE . PFCOUNTE , PFMERGE . Unsupported commands \u00b6 The following commands are not available, such as KEYS , we can't search keys across all backend redis instances. KEYS , MIGRATE , MOVE , OBJECT , RANDOMKEY , RENAME , RENAMENX , SCAN , WAIT . BITOP , MSETNX BLPOP , BRPOP , BRPOPLPUSH . PSUBSCRIBE , PUBLISH , PUBSUB , PUNSUBSCRIBE , SUBSCRIBE , UNSUBSCRIBE . EVALSHA , SCRIPT . DISCARD , EXEC , MULTI , UNWATCH , WATCH . CLUSTER . ECHO , QUIT . BGREWRITEAOF , BGSAVE , CLIENT , COMMAND , CONFIG , DBSIZE , DEBUG , FLUSHALL , FLUSHDB , LASTSAVE , MONITOR , ROLE , SAVE , SHUTDOWN , SLAVEOF , SYNC . SLOWLOG Statistics \u00b6 statistics reference Workflow \u00b6 sequenceDiagram participant client as Client participant sess as Session participant node as Node participant backend as Backend client ->> sess: send request sess ->> sess: handle request sess -->> node: select node by key, wait request finish node ->> node: filter chain node ->> backend: send request to backend backend ->> node: read response from backend node ->> node: handle error node -->> sess: finish request sess ->> client: send response Connection Model \u00b6 Samaritan only open a connection to redis and uses the pipeline to communicate. graph LR Client-- N:N ---Samaritan Samaritan-- 1:1 ---Redis Filter & FilterChain \u00b6 Filter is used to extend the redis proc, which can modify or intercept requests. type Filter interface { Do ( req * simpleRequest ) FilterStatus Destroy () } Filter chain is used to store filter. Filter.Do will be called by filter chain, if FilterStatus is Stop , the filter chain will stop and the subsequent filters will be ignored.","title":"Overview"},{"location":"arch/protocol/redis/redis/#redis-cluster","text":"Redis Processor in samaritan serves as a Redis Cluster Proxy just as corvus . It adapts the Redis Cluster Protocol to the Single Redis Protocol. In Redis Cluster Protocol, a client should be able to react to MOVED and ASK response while in a single redis protocol clients know nothing about sharding. Single Redis Protocol client -> Redis Cluster Proxy -> Redis Cluster","title":"Redis Cluster"},{"location":"arch/protocol/redis/redis/#redis-version","text":"Supporting Redis <= 4.x","title":"Redis Version"},{"location":"arch/protocol/redis/redis/#modified-commands","text":"MGET : split to multiple GET . MSET : split to multiple SET . DEL : split to multiple single key DEL . EXISTS : split to multiple single key EXISTS . PING : ignored and won't be forwarded. INFO , TIME : won't be forwarded to backend redis, information collected in proxy will be returned. AUTH : do authentication in proxy. CONFIG : support get , set , and rewrite sub-command to retrieve and manipulate corvus config. SELECT : ignored if index is 0 , won't be forwarded.","title":"Modified commands"},{"location":"arch/protocol/redis/redis/#restricted-commands","text":"Warning The following commands require all argument keys to belong to the same redis node. EVAL : At least one key should be given. SDIFF , SDIFFSTORE , SINTER , SINTERSTORE , SMOVE , SUNION , SUNIONSTORE . ZINTERSTORE , ZUNIONSTORE . PFCOUNTE , PFMERGE .","title":"Restricted commands"},{"location":"arch/protocol/redis/redis/#unsupported-commands","text":"The following commands are not available, such as KEYS , we can't search keys across all backend redis instances. KEYS , MIGRATE , MOVE , OBJECT , RANDOMKEY , RENAME , RENAMENX , SCAN , WAIT . BITOP , MSETNX BLPOP , BRPOP , BRPOPLPUSH . PSUBSCRIBE , PUBLISH , PUBSUB , PUNSUBSCRIBE , SUBSCRIBE , UNSUBSCRIBE . EVALSHA , SCRIPT . DISCARD , EXEC , MULTI , UNWATCH , WATCH . CLUSTER . ECHO , QUIT . BGREWRITEAOF , BGSAVE , CLIENT , COMMAND , CONFIG , DBSIZE , DEBUG , FLUSHALL , FLUSHDB , LASTSAVE , MONITOR , ROLE , SAVE , SHUTDOWN , SLAVEOF , SYNC . SLOWLOG","title":"Unsupported commands"},{"location":"arch/protocol/redis/redis/#statistics","text":"statistics reference","title":"Statistics"},{"location":"arch/protocol/redis/redis/#workflow","text":"sequenceDiagram participant client as Client participant sess as Session participant node as Node participant backend as Backend client ->> sess: send request sess ->> sess: handle request sess -->> node: select node by key, wait request finish node ->> node: filter chain node ->> backend: send request to backend backend ->> node: read response from backend node ->> node: handle error node -->> sess: finish request sess ->> client: send response","title":"Workflow"},{"location":"arch/protocol/redis/redis/#connection-model","text":"Samaritan only open a connection to redis and uses the pipeline to communicate. graph LR Client-- N:N ---Samaritan Samaritan-- 1:1 ---Redis","title":"Connection Model"},{"location":"arch/protocol/redis/redis/#filter-filterchain","text":"Filter is used to extend the redis proc, which can modify or intercept requests. type Filter interface { Do ( req * simpleRequest ) FilterStatus Destroy () } Filter chain is used to store filter. Filter.Do will be called by filter chain, if FilterStatus is Stop , the filter chain will stop and the subsequent filters will be ignored.","title":"Filter &amp; FilterChain"}]}